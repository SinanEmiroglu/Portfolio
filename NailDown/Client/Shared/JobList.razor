﻿<div class="job-status">
    <h3>@ContainerStatus (@jobs.Count())</h3>

    <ul class="dropzone @dropClass"
        ondragover="event.preventDefault();"
        ondragstart="event.dataTransfer.setData('', event.target.id);"
        @ondrop="OnDrop"
        @ondragenter="OnDragEnter"
        @ondragleave="OnDragLeave">

        @foreach (JobModel job in jobs) {
            <Job Value="@job" />
        }
    </ul>
</div>

@code {
    [CascadingParameter] JobContainer Container { get; set; }
    [Parameter] public JobStatus ContainerStatus { get; set; }
    [Parameter] public JobStatus[] StatusList { get; set; }

    private string dropClass = "";
    private List<JobModel> jobs = new List<JobModel>();

    protected override void OnParametersSet() {
        jobs.Clear();
        jobs.AddRange(Container.Jobs.Where(x => x.Status == ContainerStatus));
    }

    private async Task OnDrop() {
        dropClass = "";

        if (StatusList != null && !StatusList.Contains(Container.Payload.Status)){
            return;
        }

        await Container.UpdateJobAsync(ContainerStatus);
    }

    private void OnDragEnter() {
        if (ContainerStatus == Container.Payload.Status) {
            return;
        }

        if (StatusList != null && !StatusList.Contains(Container.Payload.Status)) {
            dropClass = "no-drop";
        }
        else {
            dropClass = "can-drop";
        }
    }

    private void OnDragLeave() {
        dropClass = "";
    }
}
