@page "/jobs"
@using NailDown.Shared.Model
@inject HttpClient _client
@inject NavigationManager _navigation
@inject IJSRuntime _jsRuntime

<h3>Jobs</h3>

<div>
    <table class="table table-striped table-bordered align-middle">
        <thead>
            <tr>
                <th>Title</th>
                <th>Description</th>
                <th>Status</th>
                <th>Relative Time</th>
            </tr>
        </thead>
        <tbody>
            @foreach (JobModel job in jobs) {
                <tr>
                    <td>@job.Title</td>
                    <td>@job.Description</td>
                    <td>@job.Status</td>
                    <td>@job.RelativeTime</td>
                    <td>
                        <input type="button" class="btn btn-primary" @onclick="()=>Editjob(job.Id)" value="Edit" />
                        <input type="button" class="btn btn-secondary" @onclick="()=>Deletejob(job.Id)" value="Delete" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="col-md-4">
    <div class="form-group">
        <input type="button" class="btn btn-primary" @onclick="@CreateNewJob" value="Create New Job" />
    </div>
</div>

@code {
    private List<JobModel> jobs = new List<JobModel>();

    protected override async Task OnInitializedAsync() {
        var result = await _client.GetAsync("api/job");
        result.EnsureSuccessStatusCode();

        var response = await result.Content.ReadFromJsonAsync<IAsyncEnumerable<JobModel>>();

        if (response != null) {
            await foreach (var item in response) {
                jobs.Add(item);
            }
        }
    }

    private void CreateNewJob() {
        _navigation.NavigateTo("job/create");
    }

    private void Editjob(uint id) {
        _navigation.NavigateTo($"job/edit/{id}");
    }

    private void Deletejob(uint id) {
        _navigation.NavigateTo($"job/delete/{id}");
    }
}
